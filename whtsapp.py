import asyncio
import aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from datetime import datetime
import logging
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import re
from datetime import datetime, timedelta
class CodeFSM(StatesGroup):
    waiting_for_code = State()
    waiting_summ = State()
    withdraw_send_ = State()
dp = Dispatcher(storage=MemoryStorage())

ADMIN_IDS = [7430202822]  # –ê–¥–º–∏–Ω ID
API_TOKEN="7962915576:AAGnnphRS8YMsBT12jbczCpmcbKRy9fZaC8"
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))




# ====== FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ======
class CodeFSM(StatesGroup):
    waiting_for_code = State()
    waiting_summ = State()
    withdraw_send_ = State()

class SubmitNumber(StatesGroup):
    choosing_tariff = State()
    entering_number = State()
    waiting_confirmation = State()

class AdminAction(StatesGroup):
    confirming_status = State()

# ====== –¢–∞—Ä–∏—Ñ—ã ======
TARIFFS = {
    "30 min - 5$": {"label": "30 min - 5$"},
    "1h - 11$": {"label": "1h - 11$"},
    "2h - 17$": {"label": "2h - 17$"},
    "3h - 26$": {"label": "3h - 26$"}
}

# ====== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏) ======
user_data = {}  # user_id: {'balance': int, 'history': list}
submitted_numbers = []  # —Å–ø–∏—Å–æ–∫ —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
submission_queue = []
timeout_minutes = 1.5


# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üì≤ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
    kb.button(text="üìã –û—á–µ—Ä–µ–¥—å")
    kb.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è")
    kb.button(text="üõ† –ê–¥–º–∏–Ω–∫–∞")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def tariff_keyboard():
    kb = InlineKeyboardBuilder()
    for tariff in TARIFFS:
        kb.button(text=tariff, callback_data=f"tariff:{tariff}")
    return kb.as_markup()

def confirm_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
    return kb.as_markup()

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "history": []}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!", reply_markup=main_menu())

@dp.message(F.text == "üì≤ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def submit_number(message: Message, state: FSMContext):
    await state.set_state(SubmitNumber.choosing_tariff)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_keyboard())

@dp.callback_query(F.data.startswith("tariff:"))
async def chosen_tariff(callback: CallbackQuery, state: FSMContext):
    tariff = callback.data.split(":", 1)[1]
    await state.update_data(tariff=tariff)
    await state.set_state(SubmitNumber.entering_number)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å:")
    await callback.answer()

@dp.message(SubmitNumber.entering_number)
async def entered_number(message: Message, state: FSMContext):
    raw = message.text.strip()
    phone = re.sub(r"[^\d+]", "", raw)  

    if phone.startswith("8"):
        phone = "+7" + phone[1:]
    elif phone.startswith("+7"):
        pass
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 8 –∏–ª–∏ +7.")
        return

    if not re.fullmatch(r"\+7\d{10}", phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX (11 —Ü–∏—Ñ—Ä).")
        return

    await state.update_data(number=phone, timestamp=datetime.now())
    await state.set_state(SubmitNumber.waiting_confirmation)
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä: {phone}\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=confirm_keyboard())

async def remove_inactive_users():
    while True:
        now = datetime.now()
        to_remove = []
        for entry in submission_queue:
            if (now - entry['submitted']) > timedelta(minutes=timeout_minutes):
                to_remove.append(entry)

        for entry in to_remove:
            submission_queue.remove(entry)
            try:
                await bot.send_message(entry['user_id'], "‚è≥ –í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.")
            except:
                pass

        await asyncio.sleep(60)
@dp.callback_query(F.data == "confirm")
async def confirm_number(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    required_fields = ['number', 'tariff', 'timestamp']
    if any(field not in data for field in required_fields):
        await callback.message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return

    entry = {
        "user_id": user_id,
        "username": callback.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞",
        "number": data['number'],
        "tariff": data['tariff'],
        "submitted": data['timestamp'],
        "status": "üü° –û–∂–∏–¥–∞–Ω–∏–µ"
    }
    submission_queue.append(entry)
    submitted_numbers.append(entry)
    user_data.setdefault(user_id, {"balance": 0, "history": []})
    user_data[user_id]["history"].append(entry)

    user_entries = [e for e in submission_queue if e['user_id'] == user_id]
    is_first_for_user = user_entries[0] == entry
    is_first_global = submission_queue[0] == entry

    if is_first_for_user and is_first_global:
        await notify_admin(entry)
        await callback.message.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚úÖ")
    else:
        await callback.message.answer(f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å ‚úÖ\nüî¢ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {submission_queue.index(entry)+1}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–∞—á–∞–ª—É –æ—á–µ—Ä–µ–¥–∏
        if len(submission_queue) >= 2 and submission_queue[1]['user_id'] == user_id:
            await bot.send_message(user_id, "üîî –í—ã —Å–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞.")

    await state.clear()
    await callback.answer()

async def notify_admin(entry):
    admin_text = (
        f"üì• –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç @{entry['username']}\n"
        f"üì± –ù–æ–º–µ—Ä: {entry['number']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {entry['tariff']}\n"
        f"üïì –í—Ä–µ–º—è: {entry['submitted'].strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üîç –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /numbers"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üîë –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code:{entry['user_id']}"),
        InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_entry:{entry['user_id']}")
    ]
])
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_text, reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
async def process_next_in_queue():
    if submission_queue:
        await notify_admin(submission_queue[0])
@dp.callback_query(F.data.startswith("cancel_entry:"))
async def cancel_submission(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])
    action, idx = callback.data.split(":")[1:]
    idx = int(idx)
    removed = False
    for entry in list(submission_queue):
        if entry["user_id"] == user_id:
            entry = submitted_numbers.pop(idx)
            submission_queue.remove(entry)
            submitted_numbers.remove(entry)
            try:
                await bot.send_message(user_id, "üö´ –í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            except:
                pass
            removed = True
            break

    if removed:
        await callback.message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")
        await process_next_in_queue()
    else:
        await callback.message.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")

    await callback.answer()


@dp.callback_query(F.data.startswith("send_code:"))
async def ask_admin_to_enter_code(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    user_id = int(callback.data.split(":")[1])
    await state.set_state(CodeFSM.waiting_for_code)
    await state.update_data(target_user=user_id)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    await callback.answer()
@dp.message(CodeFSM.waiting_for_code)
async def handle_admin_code_entry(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['target_user']
    code = message.text.strip()
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥", callback_data=f"confirm_code:{code}")]
    ])
    await bot.send_message(user_id, f"üîê –í–∞—à –∫–æ–¥: <code>{code}</code>\n–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥'.", reply_markup=markup)
    await message.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")
    await state.clear()
@dp.callback_query(F.data.startswith("confirm_code:"))
async def confirm_code_(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await bot.send_message(user_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫–æ–¥!\n\n–ù–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID [{user_id}] –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–æ–¥.")

    if submission_queue and submission_queue[0]["user_id"] == user_id:
        submission_queue.pop(0)
        await process_next_in_queue()
    await state.clear()

@dp.message(F.text == "üìã –û—á–µ—Ä–µ–¥—å")
async def show_queue(message: Message):
    user_id = message.from_user.id
    if not submission_queue:
        await message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    position = next((i + 1 for i, e in enumerate(submission_queue) if e["user_id"] == user_id), None)
    queue_text = "\n".join([f"{i+1}) @{e['username']} | {e['number']} ({e['tariff']})" for i, e in enumerate(submission_queue)])
    if position:
        await message.answer(f"üìã –û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{queue_text}\n\nüî¢ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}")
    else:
        await message.answer(f"üìã –û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{queue_text}\n\n–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message):
    user_id = message.from_user.id
    history = user_data.get(user_id, {}).get("history", [])
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    else:
        text = "".join([f"{i+1}) –ù–æ–º–µ—Ä: {e['number']}–¢–∞—Ä–∏—Ñ: {e['tariff']}–°—Ç–∞—Ç—É—Å: {e['status']}" for i, e in enumerate(history)])
        await message.answer("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:" + text)


@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    kb = ReplyKeyboardBuilder()
    kb.button(text="/numbers")
    await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "/numbers")
async def list_submitted_numbers(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not submitted_numbers:
        await message.answer("–ù–µ—Ç —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return

    kb = InlineKeyboardBuilder()
    for i, entry in enumerate(submitted_numbers):
        label = f"{entry['number']} ({entry['tariff']})"
        kb.button(text=label, callback_data=f"number:{i}")
    await message.answer("üìã –°–¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("number:"))
async def show_number_details(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    entry = submitted_numbers[idx]
    time = entry['submitted'].strftime('%d.%m.%Y %H:%M:%S')

    text = (
        f"–ù–æ–º–µ—Ä: {entry['number']}\n"
        f"–¢–∞—Ä–∏—Ñ: {entry['tariff']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{entry['username']}\n"
        f"–°–¥–∞–Ω: {time}\n"
        f"–°—Ç–∞—Ç—É—Å: {entry['status']}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ù–µ —Å–ª–µ—Ç", callback_data=f"verdict:noslet:{idx}")
    kb.button(text="‚ùå –°–ª–µ—Ç", callback_data=f"verdict:slet:{idx}")
    kb.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"verdict:cancel:{idx}")


    await callback.message.answer(text, reply_markup=kb.as_markup())
    await callback.answer()


async def update_status(idx, new_status, callback: CallbackQuery, reward_user=False):
    user_id = int(user_id)
    entry = submitted_numbers[idx]
    entry["status"] = new_status
    await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status}")
    await bot.send_message(user_id, text="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.")
    await callback.answer()



@dp.callback_query(F.data.startswith("verdict:"))
async def handle_verdict(callback: CallbackQuery):
    try:
        action, idx = callback.data.split(":")[1:]
        idx = int(idx)

        entry = submitted_numbers[idx]
        user_id = entry["user_id"]
        number = entry["number"]
        tariff = entry["tariff"]
        submitted = entry["submitted"].strftime('%d.%m.%Y %H:%M:%S')
        if action == "noslet":
            text = (
                f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –≤—ã—Å—Ç–æ—è–ª –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ {tariff}.\n"
                f"üìÖ –í—Ä–µ–º—è —Å–¥–∞—á–∏: {submitted}\n"
                f"‚è≥ –û—Ç—Å—Ç–æ—è–ª –¥–æ: —Å–µ–π—á–∞—Å"
            )
            entry["status"] = "‚úÖ –≤—ã—Å—Ç–æ—è–ª"
            entry = submitted_numbers.pop(idx)
        elif action == "slet":
            text = (
                f"‚ùå –£–≤—ã, –≤–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ {tariff}.\n"
                f"üìÖ –í—Ä–µ–º—è —Å–¥–∞—á–∏: {submitted}"
            )
            entry["status"] = "‚ùå —Å–ª–µ—Ç"
            entry = submitted_numbers.pop(idx)
        elif action == "cancel":
            text = (
                f"üö´ –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à –Ω–æ–º–µ—Ä {number}.\n"
                f"üìÖ –í—Ä–µ–º—è —Å–¥–∞—á–∏: {submitted}"
            )
            entry["status"] = "üö´ –æ—Ç–º–µ–Ω—ë–Ω"
            entry = submitted_numbers.pop(idx)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return

        await bot.send_message(user_id, text)
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[handle_verdict] –û—à–∏–±–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞.")


# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
